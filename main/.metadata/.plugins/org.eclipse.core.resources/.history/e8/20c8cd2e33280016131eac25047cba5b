'''
Created on Jun 1, 2016

@author: root
'''


import numpy as np

def euler(derivativeFunction, t, x, timeStep):
    '''
    
    '''       
    k1 = derivativeFunction(t)
    
    
    return x + timeStep * (k1)

class Voigt_ForceLength(object):
    '''
    classdocs
    '''


    def __init__(self, b, k, force, timeStep):
        '''
        Constructor
        '''
        
        self.b = b
        self.k = k
        self.force = force
        self.timeStep = timeStep
        self.length = np.zeros((len(force), 1))
        self.length[0] = force[0] / self.k
        
        
    def computeLength(self, t):
        timeIndex = np.round(t / self.timeStep)
        
        
        
    def dLdt(self, t):
        timeIndex = np.round(t / self.timeStep)
        return self.force[timeIndex] / self.b - self.k / self.b * 
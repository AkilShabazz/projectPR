'''
Created on May 25, 2016

@author: root
'''


import numpy as np

def euler(derivativeFunction, t, x, timeStep):
    '''
    
    '''       
    k1 = derivativeFunction(t)
    k2 = derivativeFunction(t + timeStep)
    
    return x + timeStep * (k1)


class Maxwell_ForceLength(object):
    '''
    classdocs
    '''


    def __init__(self, b, k, force, timeStep):
        '''
        Constructor
        '''
        self.b = b
        self.k = k
        self.length = np.zeros((len(force), 1))
        self.length_k = np.zeros((len(force), 1))
        self.length_b = np.zeros((len(force), 1))
        self.velocity = np.zeros((len(force), 1))
        self.force = force
        self.length_k[0] = force[0] / self.k
        self.length_b[0] = 0
        self.length[0] = self.length_k[0] + self.length_b[0]
        self.timeStep = timeStep 
    
    def computeLength(self, t):
        timeIndex = t / self.timeStep
        self.length[timeIndex] = self.computeSpringLength(t) + self.computeViscosityLength(t)
        
        
        
    def computeSpringLength(self, t):
        timeIndex = t / self.timeStep
        self.length_k[timeIndex] = self.force[timeIndex] / self.k
        return self.length_k[timeIndex]
    
    def computeViscosityLength(self, t):
        timeIndex = t / self.timeStep
        self.length_b[timeIndex] = euler(self.dLbdt, t, self.length_b[timeIndex - 1],  self.timeStep) 
        return self.length_b[timeIndex] 
    
    def dLbdt(self, t):
        timeIndex = t / self.timeStep
        return self.force[timeIndex] / self.b
        
        
        
    